@model ExamVM;
@{
    <html>
<head>
    <style>
        .help {
            text-decoration: underline;
            color: blue;
            cursor: pointer;
            display: none;
            margin: auto 10px;
            line-height: 30px;
            text-align: center;
            float: left;
        }

        .nHelp {
            border-radius: 50%;
            height: 30px;
            background-color: blue;
            color: #fff;
            display: block;
            width: 30px;
            line-height: 30px;
            text-align: center;
            float: left;
        }

        .nErrors {
            border-radius: 50%;
            height: 30px;
            background-color: red;
            color: #fff;
            display: block;
            width: 30px;
            line-height: 30px;
            text-align: center;
            float: left;
        }
        .play{
            color:red;
            font-weight:bold 
        }
    </style>
</head>    
<body>
        <div >
            @if (Model==null || !Model.ExamStarted)
            {
            <form id="frmUpload" style="background-color:#eee; width:100%" asp-action="Index" enctype="multipart/form-data">
                <div class="form-group">
                    <span>Input File :</span>
                    <input type="file" asp-for="FileToUpload" class="form-control-file" />
                    <span asp-validation-for="FileToUpload" class="text-danger"></span>
                </div>

                <div class="form-group" style="display:none">
                    <span>Number Of Allowed Mistakes :</span>
                    <input asp-for="nMistakes" class="form-control" />
                    <span asp-validation-for="nMistakes" class="text-danger"></span>
                </div>

                <div class="form-group">
                    <span>Read :</span>
                    <input type="checkbox" asp-for="Pronounciation" class="form-control" />
                    
                </div>

                <div class="form-group">
                    <span>Record Your Answer :</span>
                    <input type="checkbox" asp-for="PronounciationCheck" class="form-control" />
                    
                </div>


                
                <input type="submit" value="Start Exam" />
            </form>
            }
            
            else
            { 
            <div style="background-color:navajowhite">
                <div class="form-group" style="display:none">
                    <span>Number Of Allowed Mistakes :</span>
                    <input asp-for="nMistakes" class="form-control"  readonly />
                 
                </div>

                <div class="form-group">
                    <span>Read :</span>
                    <input type="checkbox" asp-for="Pronounciation" class="form-control" disabled   />
                    
                </div>

                <div class="form-group">
                    <span>Record Your Answer :</span>
                    <input type="checkbox" asp-for="PronounciationCheck" class="form-control" disabled  />
                    
                </div>
                <input type="hidden" asp-for="language" >
                       
            </div>

            <div style="width:100%">
                @*@foreach (ExamItem item in Model.Questions)
                {
                    <div>
                        <p>
                            @item.language1
                        </p>
                        <p>
                            @item.language2
                        </p>
                        
                        <p>
                            @item.type
                        </p>
                    </div>
                }*@


                <div id="carouselExampleIndicators" class="carousel slide" data-interval="false" data-slide-to=0 style="width:100%">

                    <div class="carousel-inner" style="overflow:hidden">

                        <div class="carousel-item active">
                            <img src="~/input/1.jpg" style="width:100%">
                            <div class="carousel-caption d-none d-md-block">
                                <h1>start exam</h1>
                            </div>
                        </div>
                        @foreach (ExamItem item in Model.Questions)
                        {
                            <div class="carousel-item " data-type="@item.type">
                                <img src="~/input/1.jpg" style="width:100%">
                                <div class="carousel-caption d-none d-md-block">
                                    <h5>@item.language1</h5>
                                    @if (item.type == "full")
                                    {
                                        <p>@item.language2</p>
                                    }
                                    else
                                    {
                                        <p style="display:none">@item.language2</p>
                                    }

                                </div>

                            </div>
                        }
                        <div class="carousel-item">
                            <img src="~/input/1.jpg" style="width:100%">
                            <div class="carousel-caption d-none d-md-block">
                                <div class="alert alert-success resultOK">Excellent</div>
                                <div class="alert alert-danger resultBAD">You Exceeded number of allowed errors</div>
                            </div>
                        </div>

                    </div>
                    <div id="bottomDiv" style="bottom:0;position:absolute;height:40px;background-color:#eee;width:100%;text-align:center;display:none">
                        <div style="margin:10px auto;width:10%;display:flex;justify-content:space-between">
                            <span class="nErrors">0</span>
                            <span class="help"> Help </span>
                            <span class="nHelp">0</span>
                        </div>
                    </div>
                    <div id="topDiv" style="top:0;position:absolute;height:40px;background-color:#eee;width:100%;text-align:center;display:none;line-height:40px">
                        <div>
                            <span>Question # </span>
                            <span class="Qindex"> 0 </span>
                            <span>/</span>
                            <span class="Qn"> 0 </span>
                        </div>
                    </div>
                    <div id="top2Div" style="top:45px;position:absolute;height:40px;background-color:#ddd;width:100%;text-align:center;display:none;line-height:40px">
                        <div>
                            <span class="replay" style="display:none;cursor:pointer;margin:auto 20px;text-decoration:underline">Replay </span>
                            <span class="rec" style="display:none;cursor:pointer;margin:auto 20px;text-decoration:underline">Record</span>
                            <span class="stop" style="display:none;cursor:pointer;margin:auto 20px;text-decoration:underline">Stop</span>
                            <span class="skip" style="cursor:pointer;margin:auto 20px;text-decoration:underline">Skip </span>

                        </div>
                    </div>

                    <div class="alert alert-success good" style="display:none;position:absolute;top:150px">Excellent</div>
                    <div class="alert alert-danger bad" style="display:none;position:absolute;top:150px">Wrong</div>
                </div>
                    </div>

                <div>
                    <a class="btn btn-primary " href="./Exam">Restart exam</a>
                </div>
                }
                @if (ViewBag.Error != "" && ViewBag.Error != null)
                {
                    <div class="alert alert-danger">@ViewBag.Error</div>
                }
            </div>

    </body>
    </html>
}

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}

@section myJsCode{
    <script>
        var files = [];
        var skipped = [];
        //var spaceIndex = 0;
        //if ($('.carousel-item.active p:visible').length == 1) {
        //    $('span.help').fadeOut()
        //}

        $('span.help').on('click', function () {
            $('.carousel-item.active p').fadeIn()
            $('span.help').fadeOut()
            $('span.nHelp').text(parseInt($('span.nHelp').text())+1)
        })
        $('span.skip').on('click', function () {
            index = $('.carousel').find('.active').index();
            skipped.push(index);
            /*
            if (index < 6)
                goto next
            else
              if somw skipped dthen go to first ski
               else
               dont do anything

            */
            if (index < parseInt($('span.Qn').text())) {
                $('.carousel').carousel(index + 1);
            }
            else {
                if (skipped.length > 0) {
                    i = skipped[0];
                    $('.carousel').carousel(i);
                    skipped = skipped.splice(1)
                }
            }
        })

        $('span.replay').on('click', function () {
            index = $('.carousel').find('.active').index();
            //console.log(files);
            //return;
            if (files.filter((f) => f.index == index).length > 0) {
                var recordedFile = files.filter((f) => f.index == index)[0].file
                var path = recordedFile//$("#srcInput")[0].src
                var audio = new Audio(path);
                audio.play();
            }
        });

        //$('span.rec').on('click', function () {
        //    if ($(this).text() == "Record")
        //        $(this).text("Stop")
        //    else
        //        $(this).text("Record")
        //})

      //  $(function () {

            $(document).bind('keyup', function (e) {
                console.log(e.which)
                index = $('.carousel').find('.active').index();
                nQ = parseInt($('span.Qn').text())
                if (index > nQ)
                    return;

                if (e.which == 32) {
                    //  $('.carousel').carousel('next');
                    
                    if ($('span.rec').css('display') == 'none')
                        $('.carousel').carousel('next');
                    else {
                        //rec then stop
                        let btn = $('span.rec');
                        let btn2 = $('span.stop');
                        if (btn.hasClass('play')) {
                            btn2.click();
                        }
                        else {
                            btn.click();
                        }
                    }
                    //else
                    //$('span.rec').click();*/
                }
                if (e.which == 39)//right arrow
                {
                    $('span.skip').click();
                }
                if (e.which == 72 || e.which == 104) {
                    if ($('span.help').css('display')=="block")
                        $('span.help').click()

                }

            });

            $('.carousel').on('slid.bs.carousel', function () {
                //if ($('.carousel-item.active').data('type') == "short") {
                if ($('.carousel-item.active p:visible').length == 0 && $('#PronounciationCheck')[0].checked) {
                    $('span.help').fadeIn()
                }
                else {
                    $('span.help').fadeOut()
                }


                if ($('#PronounciationCheck')[0].checked) {
                    $('span.rec').fadeIn();
                   // $('span.stop').fadeIn();
                    //$('span.help').fadeIn();
                    $('span.skip').fadeIn();
                }
                else {
                    $('span.rec').fadeOut();
                    $('span.stop').fadeOut();
                   // $('span.help').fadeOut();
                    $('span.skip').fadeOut();
                }
                index = $(this).find('.active').index();
                ///
                if (index > 0) {
                    $('#bottomDiv').fadeIn();
                    $('#topDiv').fadeIn();
                    $('#top2Div').fadeIn();
                }
                $('span.Qindex').text(index);
                $('span.Qn').text(@ViewBag.Count);

                if (files.filter((f) => f.index == index).length == 0)
                    $('span.replay').fadeOut();
                else
                    $('span.replay').fadeIn();


                if ($('.carousel-item.active').data('type') == "full" && $('#Pronounciation')[0].checked) {
                    if (files.filter((f) => f.index == index).length == 0) {
                        $.ajax({
                            url: '/Exam/ReadText',
                            type: 'POST',
                            data: {
                                // audioname: "hello",//obviously change to something dynamic
                                index: index,
                                language: $('#language').val(),
                                statement: $('.carousel-item.active p').text()
                            },
                            success: function (response) {
                                console.log(response);
                                //
                                var recordedFile = '\\output\\' + response
                                var path = recordedFile//$("#srcInput")[0].src
                                var audio = new Audio(path);
                                audio.play();
                                files.push({ index: index, file: path })
                                $('span.replay').fadeIn();
                                //
                                // $('#HiddenAudioFileName').val(response)
                                // playRecorded();
                                // $('#hearYourVoice').fadeIn()
                            },
                            error: function (response) { console.log(response); }
                        });
                    }
                    else {
                        var recordedFile = files.filter((f) => f.index == index)[0].file
                        var path = recordedFile//$("#srcInput")[0].src
                        var audio = new Audio(path);
                        audio.play();
                    }
                }
                ///
                nQ = parseInt($('span.Qn').text())
                if (index == nQ + 1) {
                    if (parseInt($('span.nErrors').text()) > parseInt($('#nMistakes').val())) {
                        $('div.resultOK').fadeOut(1);
                        $('div.resultBAD').fadeIn(1);
                    }
                    else {
                        $('div.resultOK').fadeIn(1);
                        $('div.resultBAD').fadeOut(1);
                    }

                    $('#bottomDiv').fadeOut();
                    $('#topDiv').fadeOut();
                    $('#top2Div').fadeOut();
                }

                ///
            })
      //  })



        /////////////////
        let audioIN = { audio: true };
        // audio is true, for recording
        if ($('#PronounciationCheck')[0].checked) {
        // Access the permission for use
        // the microphone
        navigator.mediaDevices.getUserMedia(audioIN)

            // 'then()' method returns a Promise
            .then(function (mediaStreamObj) {
                // Start-stop record
                let btn = $('span.rec');
                let btn2 = $('span.stop');

                // This is the main thing to recorde
                // the audio 'MediaRecorder' API
                let mediaRecorder = new MediaRecorder(mediaStreamObj);
                // Pass the audio stream

                /*
                btn.on('click', function () {
                    if ($(this).text() == "Record") {
                        audioIN.audio = true;
                        mediaRecorder.start();
                        $(this).text("Stop")
                    }
                    else {
                        mediaRecorder.stop();
                        audioIN.audio = false;
                        $(this).text("Record")
                    }
                })
                */
                btn.on('click', function () {
                    if (btn.hasClass('play'))
                        return;
                    btn.addClass('play')
                       audioIN.audio = true;
                    mediaRecorder.start();
                    
                })
                btn2.on('click', function () {
                    if (!btn.hasClass('play'))
                        return;

                    btn.removeClass('play')
                    mediaRecorder.stop();
                    audioIN.audio = false;
                    
                })
                //
                document.addEventListener('keydown', (event) => {
                    var name = event.key;
                    var code = event.code;

                    let btn = $('span.rec');
                    let btn2 = $('span.stop');
                    console.log(btn);
                    if (name == 'Enter') {
                        if (btn.hasClass('play')) {
                            btn2.click();
                        }
                        else {
                            btn.click();
                        }
                    }
                    // Alert the key name and key code on keydown
                    //alert(`Key pressed ${name} \r\n Key code value: ${code}`);
                }, false);
                //
                // If audio data available then push
                // it to the chunk array
                mediaRecorder.ondataavailable = function (ev) {
                    console.log(ev.data);
                    dataArray.push(ev.data);
                }

                // Chunk array to store the audio data
                let dataArray = [];

                // Convert the audio data in to blob
                // after stopping the recording
                mediaRecorder.onstop = function (ev) {

                    // blob of type mp3
                    let audioData = new Blob(dataArray,
                        { 'type': 'audio/mp3;' });

                    // After fill up the chunk
                    // array make it empty
                    dataArray = [];

                    // Creating audio url with reference
                    // of created blob named 'audioData'
                    let audioSrc = window.URL
                        .createObjectURL(audioData);

                    // Pass the audio url to the 2nd video tag
                    //playAudio.src = audioSrc;

                    //


                    var reader = new window.FileReader();
                    reader.readAsDataURL(audioData);

                    reader.onloadend = function () {
                        base64 = reader.result;
                        base64 = base64.split(',')[1];

                        $.ajax({
                            url: '/Exam/ReadMicrophone',
                            type: 'POST',
                            data: {
                                // audioname: "hello",//obviously change to something dynamic
                                chunks: base64,
                                SampleText: $('.carousel-item.active p').text(),
                                Language: $('#language').val()
                            },
                            success: function (response) {
                                console.log(response);
                                if (response == 'Perfect') {
                                    $('div.good').fadeIn(1000, function () {
                                        $(this).fadeOut(1000, function () {
                                            gotoNext()
                                        });
                                        

                                    })
                                }
                                else {
                                    $('div.bad').fadeIn(1000, function () {
                                        $(this).fadeOut(1000, function () {
                                            $('span.nErrors').text(parseInt($('span.nErrors').text()) + 1)
                                            if (parseInt($('span.nErrors').text()) >  parseInt($('#nMistakes').val())) {
                                                nQ = parseInt($('span.Qn').text())
                                                $('.carousel').carousel(nQ + 1);
                                            }
                                            else
                                              gotoPrev()
                                        });
                                        

                                    })
                                }

                            },
                            error: function (response) { console.log(response); }
                        });
                    }
                    //
                }
            })

        }
        skipFlag = false;
        function gotoNext() {
            index = $('.carousel').find('.active').index();
            nQ = parseInt($('span.Qn').text())
            if (index < nQ && skipFlag == false)
                $('.carousel').carousel(index + 1);

            if (index == nQ) {
                if (skipped.length == 0) {
                    $('.carousel').carousel(index + 1);
                    skipFlag = false
                }
                else {
                    skipFlag = true;
                    i = skipped[0];
                    skipped = skipped.splice(1)
                    $('.carousel').carousel(i);
                }
            }
            else {
                if (skipFlag) {
                    if (skipped.length == 0) {
                        $('.carousel').carousel(index + 1);
                        skipFlag = false
                    }
                    else {
                        skipFlag = true;
                        i = skipped[0];
                        skipped = skipped.splice(1)
                        $('.carousel').carousel(i);
                    }
                }
            }
        }
        function gotoPrev() {
            index = $('.carousel').find('.active').index();
            if (index > 1)
              $('.carousel').carousel(index - 1);
        }
    </script>
}
